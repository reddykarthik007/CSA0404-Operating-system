#include <stdio.h>
#include <stdbool.h>

struct Process {
    int burst_time;
    int priority;
    bool completed;
};

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    // Input burst time and priority for each process
    printf("Enter burst time and priority for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d:\n", i + 1);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burst_time);
        printf("Priority: ");
        scanf("%d", &processes[i].priority);
        processes[i].completed = false;
    }

    int current_time = 0;
    int completed_processes = 0;

    // Execute processes based on priority until all are completed
    printf("\nExecution Order:\n");
    while (completed_processes < n) {
        int highest_priority = -1;
        int selected_process_index = -1;

        // Find process with highest priority that has arrived
        for (int i = 0; i < n; i++) {
            if (!processes[i].completed && processes[i].priority > highest_priority) {
                highest_priority = processes[i].priority;
                selected_process_index = i;
            }
        }

        // Execute the selected process for 1 unit of time
        if (selected_process_index != -1) {
            printf("Executing Process %d at time %d\n", selected_process_index + 1, current_time);
            processes[selected_process_index].burst_time--;
            if (processes[selected_process_index].burst_time == 0)
                processes[selected_process_index].completed = true;
        } else {
            printf("Idle at time %d\n", current_time);
        }

        // Increment time
        current_time++;
        // Check for completed processes
        completed_processes = 0;
        for (int i = 0; i < n; i++) {
            if (processes[i].completed)
                completed_processes++;
        }
    }

    return 0;
}
